// ********************************************************************************************************************
// *                                                                                                                  *
// *                                  The link representation. Arrows between agents.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                              Графическое представление стрелок (связей между агентами).                          *
// *                                                                                                                  *
// * Eugene G. Sysoletin <e.g.sysoletin@gmail.com>                                       Created 18 jun 2017 at 13:19 *
// ********************************************************************************************************************

#include "LinkItem.h"

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                The constructor.                                                  *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                  Конструктор.                                                    *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::LinkItem::LinkItem() 
    : AbstractEntityItem()
{
    _boundingRect = QRect(0, 0, 64, 22);
    _className = "LinkItem";    
    __from = nullptr;
    __to = nullptr;
    __posFrom = QPoint( 0, 0 );
    __posTo = QPoint( 0, 0 );
    __tempTo = QPoint( 0, 0 );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         Entity for link is always empty.                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                     "Сущность" для стрелки - всегда пустая.                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::checkEntity() {
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                          Set the item link comes from.                                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                       Установить элемент, откуда идет связь.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::setFrom ( tengu::AbstractEntityItem * entity ) {
    __from = entity;
    __recalculate();
    update();
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                            Set the item link goes to.                                            *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                       Установить элемент, куда идет связь.                                       *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::setTo ( tengu::AbstractEntityItem * entity ) {
    __to = entity;
    __tempTo = QPoint( 0, 0 );
    __recalculate();
    update();
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                      Set the coordinates link goes to.                                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Установить координаты, куда идет связь.                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::setTo ( QPoint to ) {
    __tempTo = to;
    __recalculate();
    update();    
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         The link have not any entities.                                          *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                       Связь вообще не имеет "сущностей"                                          *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::LinkItem::isEmpty() {
    return ( ( ! __from ) && ( ! __to ) );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                 The create link process is still not finished.                                   *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Процесс создания связи все еще не закончен.                                    *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::LinkItem::semiCreated() {
    return ( ( !__from ) || ( ! __to ) );
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                    Re-calculate graphics representation of link.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                    Пересчитать графическое представление связи.                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::__recalculate() {
        
    int x = 0, y = 0, w = 0, h = 0;
    
    if ( __from ) {        
        
        QRect fromRect = __from->boundingRect().toRect();
        
        if ( ( __tempTo.x() != 0 ) || ( __tempTo.y() != 0 ) ) {
            
            // The temporary drag point has a higher priority than the __to element.
            // Точка перетаскивания имеет более высокий приоритет, чем элемент __to.
            
            if ( __tempTo.x() > fromRect.topRight().x() + __from->x() ) {
                
                // We are to the right of the rectangle of the first element.
                // Мы находимся правее, чем прямоугольник первого элемента.
                
                if ( __tempTo.y() > fromRect.bottomRight().y() + __from->y() ) {
                    
                    // We are to the right and lower than the lower right corner of the first element.
                    // Мы находимся правее и ниже, чем правый нижний угол первого элемента.
                    
                    x = fromRect.topRight().x() + __from->x();
                    y = fromRect.topRight().y() + __from->y();
                    w = __tempTo.x() - x;
                    h = __tempTo.y() - y;
                    __posFrom.setX( 1 );
                    __posFrom.setY( fromRect.height() / 2  );
                    __posTo.setX( w - 1 );
                    __posTo.setY( h - 1 );
                    
                } else {
                    
                    // We are to the right, but not below the lower corner of the first element.
                    // Мы находимся правее, но не ниже нижнего угла первого элемента.
                    
                    x = fromRect.bottomRight().x() + __from->x();
                    y = __tempTo.y();
                    if ( y > fromRect.topRight().y() + __from->y() ) y = fromRect.topRight().y() + __from->y();
                    w = __tempTo.x() - x;
                    h = fromRect.bottomRight().y() - y + __from->y(); // __tempTo.y() - y;                    
                    __posFrom.setX( 1 );
                    __posFrom.setY( h - fromRect.height() / 2 );
                    __posTo.setX( w - 1 );
                    __posTo.setY( __tempTo.y() - y + 2 );
                }                
                                
            } else if ( __tempTo.x() < fromRect.topLeft().x() + __from->x() ) {
                
                // We are to the left of the rectangle of the first element.
                // Мы находимся левее, чем прямоугольник первого элемента.                
            };            
        
        } else if ( __to ) {
            
            // We have an finished element for this link.
            // У нас есть конечный элемент.
            
            QRect r2 = __to->boundingRect().toRect();
            
        };
    };                
    
    qDebug() << "Итого после recalculate x=" << x << ",y=" << y << ",w=" << w << ",h=" << h;
    setX( x );
    setY( y );
    _boundingRect.setWidth( w );
    _boundingRect.setHeight( h );
            
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              The painting method.                                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                Метод рисования.                                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::LinkItem::paint ( QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget ) {
    
    _storePainterSettings( painter );
    
    // -----------------------------------------------
    // For debug purposes, do not remove it.
    // Для отладки, не удаляй.
    // _drawBorderRect( painter );
    // -----------------------------------------------
        
    QPen pen;
    
    if ( semiCreated() ) {
        
        // We are in the process of creating.
        // Мы находимся в процессе создания.
        
        pen.setColor( QColor( 128, 128, 128 ) );
        pen.setWidth( 2 );
        pen.setStyle( Qt::DashLine );
        
    } else {
        
        if ( isSelected() ) {
            pen.setColor( QColor( 128, 32, 32 ) );       
            pen.setWidth( 8 );
        } else {
            pen.setColor( _processDiagram_borderColor() );
            pen.setWidth( 4 );
        };
        
    }
        
    painter->setPen( pen );
    
    // qDebug() << "Repaint: from " << __posFrom << ", to=" << __posTo ;
    
    // The arrow's line
    // Линия стрелки.
    
    painter->drawLine( __posFrom, __posTo );
    
    // The nose of arrow
    // Носик стрелки.
    
    // QPoint endT = end + QPoint( -15, -10 );
    // QPoint endB = end + QPoint( -15, 10 );
    
    // painter->drawLine( end, endT );
    // painter->drawLine( end, endB );
    
    _restorePainterSettings( painter );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                The destructor.                                                   *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                  Деструктор.                                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::LinkItem::~LinkItem() {

}
