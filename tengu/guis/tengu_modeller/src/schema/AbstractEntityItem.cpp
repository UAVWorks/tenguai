// ********************************************************************************************************************
// *                                                                                                                  *
// *                              Abstract graphics object, representation of AbstractEntity.                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                            Абстрактный графический объект, представление AbstractEntity.                         *
// *                                                                                                                  *
// * Eugene G. Sysoletin <e.g.sysoletin@gmail.com>                                       Created 08 jun 2017 at 09:00 *
// ********************************************************************************************************************

#include "AbstractEntityItem.h"

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                  The constructor.                                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                    Конструктор.                                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::AbstractEntityItem::AbstractEntityItem( AbstractEntity * entity, QGraphicsItem * parent ) 
    : QGraphicsObject( parent )
{
    _entity = entity;
    _boundingRect = QRectF(0, 0, 20, 20);
    _selected = false;
    _decomposite = false;
    _changed = false;
    
    __mousePressed = false;        
    __uuid = QUuid::createUuid().toString();
    __lastModified = QDateTime::currentDateTimeUtc();
    
    // setAcceptHoverEvents( true );
    // setAcceptTouchEvents( true );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                   Overrided function for bounding the rectangle.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                  Перекрытая функция для привязки прямоугольника.                                 *
// *                                                                                                                  *
// ********************************************************************************************************************

QRectF tengu::AbstractEntityItem::boundingRect() const {
    return _boundingRect;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                    Paint function for abstract graphics agent (only for demonstrate it is empty)                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *             Функция рисования абстрактного графического агента (только чтобы показать, что он пустой)            *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::AbstractEntityItem::paint( QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
    painter->drawRect(  _boundingRect );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                      Return agent this graphics item based on.                                   *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                        Вернуть агента, на котором основывается данный графический элемент.                       *
// *                                                                                                                  *
// ********************************************************************************************************************
/*
tengu::AbstractEntity * tengu::AbstractEntityItem::entity() {
    return _entity;
}
*/
// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              Is this agent selected?                                             *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                    Является ли данный агент выбранным (отмеченным)?                              *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::AbstractEntityItem::isSelected() {
    return _selected;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              Set this agent selection.                                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                        Установка выбранности данного агента.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::AbstractEntityItem::setSelected ( bool selection ) {
    _selected = selection;
    update();
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                    Make R-G-B constituent of color to some brighter.                             *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                     Сделать R-G-B составляющую цвета чуть поярче.                                *
// *                                                                                                                  *
// ********************************************************************************************************************

int tengu::AbstractEntityItem::_brighter ( int color ) {
    color += color / 5;
    if ( color > 255 ) color = 255;
    return color;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         Get border's color for process diagrams.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                       Получить цвет границ для диаграмм процессов.                               *
// *                                                                                                                  *
// ********************************************************************************************************************

QColor tengu::AbstractEntityItem::_processDiagram_borderColor() {
    
    QColor bgColor = ORDINAR_BORDER_COLOR;
    if ( _selected ) bgColor = ORDINAR_SELECTED_BORDER_COLOR;
    
    /*
    if ( entity()->isFocused() ) {
        if ( _selected ) bgColor = FOCUSED_SELECTED_BORDER_COLOR;
        else bgColor = FOCUSED_BORDER_COLOR;
    };
    
    if ( entity()->isActive() ) {
        if ( _selected ) bgColor = ACTIVE_SELECTED_BORDER_COLOR;
        else bgColor = ACTIVE_BORDER_COLOR;
    };
    */
    
    return bgColor;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                   Get shadow's color for processes diagrams.                                     *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Получить цвет теней для диаграмм процессов.                                    *
// *                                                                                                                  *
// ********************************************************************************************************************

QColor tengu::AbstractEntityItem::_processDiagram_shadowColor() {
    QColor c = QColor( 240, 240, 240 );
    if ( _selected ) c = QColor( 220, 220, 220 );
    return c;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                     Get "dark" fill color for process diagrams.                                  *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                               Получить "темный" цвет заполнения для диаграмм процессов.                          *
// *                                                                                                                  *
// ********************************************************************************************************************

QColor tengu::AbstractEntityItem::_processDiagram_darkFillColor() {
    
    QColor c = ORDINAR_FILL_COLOR;
    if ( _selected ) c = ORDINAR_SELECTED_FILL_COLOR;
 
    /*
    if ( agent()->isFocused() ) {
        if ( _selected ) c = FOCUSED_SELECTED_FILL_COLOR;
        else c = FOCUSED_FILL_COLOR;
    };
    
    if ( agent()->isActive() ) {
        if ( _selected ) c = ACTIVE_SELECTED_FILL_COLOR;
        else c = ACTIVE_FILL_COLOR;
    };
    */
    
    return c;
    
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                   Get "bright" fill color for process'es diagrams.                               *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                Получить "яркий" цвет заполнения для диаграмм процессов.                          *
// *                                                                                                                  *
// ********************************************************************************************************************

QColor tengu::AbstractEntityItem::_processDiagram_brightFillColor() {
    
    QColor d = _processDiagram_darkFillColor();
    int r = _brighter( d.red() );
    int g = _brighter( d.green() );
    int b = _brighter( d.blue() );
    return QColor( r, g, b );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                       Get the "pen" for painting borders of elements of process diagram.                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                   Получить "карандаш" для рисования границ элементов на диаграммах процессов.                    *
// *                                                                                                                  * 
// ********************************************************************************************************************

QPen tengu::AbstractEntityItem::_processDiagram_borderPen() {
    QPen pen;
    pen.setWidth( 3 );
    pen.setStyle( Qt::SolidLine );
    pen.setColor( _processDiagram_borderColor() );
    return pen;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                               Mouse press event handler.                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Обработчик события нажатия мышки.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************
/*
void tengu::AbstractAgentItem::mousePressEvent ( QGraphicsSceneMouseEvent * event ) {
    qDebug() << "AbstractAgentItem::mousePressEvent()" ;
    __mousePressed = true;
    QGraphicsItem::mousePressEvent ( event );
}
*/
// ********************************************************************************************************************
// *                                                                                                                  *
// *                                             Mouse release event handler.                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                        Обработчик события отпускания мыши.                                       *
// *                                                                                                                  *
// ********************************************************************************************************************
/*
void tengu::AbstractAgentItem::mouseReleaseEvent ( QGraphicsSceneMouseEvent * event ) {
    qDebug() << "AbstractAgentItem::mouseReleaseEvent()" ;
    __mousePressed = false;
    QGraphicsItem::mouseReleaseEvent ( event );
}
*/
// ********************************************************************************************************************
// *                                                                                                                  *
// *                                             Mouse move event handler.                                            *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                         Обработчик события перемещения мыши.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************
/*
void tengu::AbstractAgentItem::mouseMoveEvent ( QGraphicsSceneMouseEvent * event ) {
    qDebug() << "AbstractAgentItem::mouseMoveEvent()";
    QGraphicsItem::mouseMoveEvent ( event );
}
*/
// ********************************************************************************************************************
// *                                                                                                                  *
// *                                   Return properties list for this abstract agent.                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                       Вернуть список свойств данного агента.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

QList<QPair<QString, QVariant>> tengu::AbstractEntityItem::properties() {

    QList<QPair<QString, QVariant>> result;
    
    if ( _entity ) {
        result.append( QPair<QString, QVariant>("UUID", QVariant( _entity->getUUID() ) ) );    
        result.append( QPair<QString, QVariant>( tr("Name"), QVariant( _entity->getName() ) ) );
        result.append( QPair<QString, QVariant>( tr("Comment"), QVariant( _entity->getComment() ) ) );
    }
    
    return result;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                  Is this entity the subject for decomposition?                                   *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Является ли данная сущность декомпозируемой?                                   *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::AbstractEntityItem::isDecomposite() {
    
    // "Decomposite" mean either forcibly decomposition or this base is exactly an agent and he has children.
    // "Декомпозиция" означает либо принудительную декомпозицию, либо в основании лежит точно агент и он имеет детей.
    
    AbstractAgent * agent = qobject_cast<AbstractAgent * >( _entity );
    bool agentHasChildren = false;
    if ( agent ) agentHasChildren = agent->hasChildren();
    return ( _decomposite || agentHasChildren  );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *       Get UUID of this object. This is not the same as uuid of entity this object was based on.                  *
// * ---------------------------------------------------------------------------------------------------------------- *
// *     Вернуть UUID данного объекта. Это не то же самое, что UUID сущности, на которой данный объект базируется.    *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::AbstractEntityItem::getUUID() {
    return __uuid;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                  Return the name, wrapper for the entity object.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                    Вернуть имя, обертка для объекта-сущности.                                    *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::AbstractEntityItem::getName() {
    
    if ( _entity ) return _entity->getName();
    return QString("");
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                     Set the name. Wrapper for entity object.                                     *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Установить имя. Обертка для объекта-сущности.                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::AbstractEntityItem::setName ( QString name ) {
    if ( _entity ) _entity->setName( name );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                Return comment. This is only wrapper for entity object.                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                             Вернуть комментарий. Просто обертка для объекта сущности.                            *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::AbstractEntityItem::getComment() {
    
    if ( _entity ) return _entity->getComment();    
    return QString("");
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                 Set comment, wrapper for the entity object.                                      *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                              Установить комментарий, обертка для объекта сущности.                               *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::AbstractEntityItem::setComment ( QString comment ) {
    if ( _entity ) _entity->setComment( comment );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                  Execution mode is the same as for entity object.                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                          Режим выполнения - тот же самый, что и у объекта-сущности.                              *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::AbstractStorageableEntity::execution_mode_t tengu::AbstractEntityItem::getExecutionMode() {
    
    if ( _entity ) return _entity->getExecutionMode();
    return EM_ALWAYS;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                               Set execution mode, the wrapper for the entity object.                             *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                           Установка режима выполнения, обертка для объекта-сущности.                             *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::AbstractEntityItem::setExecutionMode ( tengu::AbstractStorageableEntity::execution_mode_t mode ) {
    if ( _entity ) _entity->setExecutionMode( mode );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                             Has been this object changed?                                        *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                             Был ли данный объект изменен?                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::AbstractEntityItem::hasChanged() {
    if ( _entity ) return ( _entity->hasChanged() || _changed );
    return _changed;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                     The latest modification time of this object.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                         Последнее время модификации объекта.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

QDateTime tengu::AbstractEntityItem::lastModified() {
    
    if ( _entity ) {
        if ( _entity->lastModified() > __lastModified ) return _entity->lastModified();
        return __lastModified;
    };
    
    return __lastModified;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                           Conversion from object to json                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                           Преобразование из объекта в JSON.                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

QJsonObject tengu::AbstractEntityItem::toJSON() {
    
    QJsonObject o;
    if ( _entity ) {
        o = _entity->toJSON();
        
        // The UUIDs is different.
        // UUIDы разные.
        
        o.insert("entity_uuid", _entity->getUUID() );        
    };
    o.insert("uuid", getUUID() );
    
    // This object's fields.
    // Поля данного объекта.
    
    return o;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                            Conversion from JSON to object.                                       *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                           Преобразование из JSONа в объект.                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::AbstractEntityItem::fromJSON ( QJsonObject json ) {
    
    if ( _entity ) {
        return _entity->fromJSON( json );
    };
    
    return false;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                   The destructor.                                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                      Деструктор.                                                 *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::AbstractEntityItem::~AbstractEntityItem() {
    if ( _entity ) delete ( _entity );
}


