// ********************************************************************************************************************
// *                                                                                                                  *
// *                       The task. The agent which can calculate something using QJSEngine.                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                    Задача. Агент, который может что-нибудь вычислять, используя QJSEngine.                       *
// *                                                                                                                  *
// * Eugene G. Sysoletin <e.g.sysoletin@gmail.com>                                       Created 09 jun 2017 at 09:57 *
// ********************************************************************************************************************

#include "Task.h"

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                    The constructor.                                              *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                       Конструктор.                                               *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::Task::Task () 
    : SproutableAgent()
{
    _class_name = "Task";
    _entity_type = ET_Task;
    
    // __start_condition = tr("// At least this one function must be exists") + "\n\nfunction start() {\n    return ( true );\n};\n";
    // __algorythm = tr("// At least this one functiom must be exists") + "\n\nfunction step() {\n};\n";
    // __stop_condition = tr("// At least this one function must be exists") + "\n\nfunction stop() {\n    return (true);\n};\n";

    __qmlEngine = nullptr;
    __qmlObject = nullptr;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         The execution process was failed.                                        *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                      Процесс выполнения завершился неудачно.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::__failed_with_errors ( QQmlComponent & component ) {
    
    QString msg = tr("Execution failed. ");
    
    QList<QQmlError> errors = component.errors();
    if ( errors.count() > 0 ) {
        QQmlError fe = errors.at(0);
        msg += tr("Line: ") + fe.line() + tr(", column: ") + fe.column() + ", msg=" + fe.toString();
    };
    
    emit signalFailed( msg );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              Prepare the task for launch.                                        *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                              Подготовка задачи к запуску.                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::_prepare_for_execution() {
    
    SproutableAgent::_prepare_for_execution();
    
    QQmlEngine * qmlEngine = this->qmlEngine(); // new QQmlEngine( parent );
    
    if ( ! qmlEngine ) {
        emit signalFailed( tr("The QML Engine pointer is null.") );
        return;
    }
    
    QQmlComponent component( qmlEngine );
    component.setData( __algorythm.toUtf8(), QUrl());
    if ( component.isError() ) {
        __failed_with_errors( component );
        return;
    };
    
    __qmlObject = component.create();
    
    if ( ! __qmlObject ) {
        emit signalFailed( tr("__qmlObject is null") );
    };
    
    
    /*
    QQuickItem *item = qobject_cast<QQuickItem *>(component.create());

    QQuickView view;
    view.setSource( __algorythm );
    view.show();
    QQuickItem * root = view.rootObject()

    QQmlComponent component(view.engine(), QUrl("qrc:/Button.qml"));
    QQuickItem *object = qobject_cast<QQuickItem*>(component.create());
    */
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              Try to activate this task.                                          *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Попытка активации данной задачи.                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::Task::_tryActivate() {
    
    qDebug() << "Task::_tryActivate, " << getHumanName();
    
    QVariant retValue;
    
    QMetaObject::invokeMethod( __qmlObject, "start",
        Q_RETURN_ARG(QVariant, retValue)
    );
    
    if ( ( retValue.isNull() ) || ( ! retValue.isValid() ) ) {
        emit signalFailed( tr("Task::_tryActivate(), failed to call the start method for the task \"") + getHumanName() + "\"");
        return false;
    };
        
    bool result = retValue.toBool();
    
    if ( result ) {
        
        // Activate this task.
        // Активация этой задачи.
        
        setFocus( false, this );
        
        _activity = true;
        emit signalActivated( _activity );
        
        // After activation we need to do at least one execution step.
        // После активации нам надо сделать как минимум один шаг выполнения.
        
        _step();
        
        
    };
        
    return result;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                           One step of task running process.                                      *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                               Один шаг выполнения задачи.                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::_step() {
    qDebug() << "Task::_step()";
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         Free this task resources after execution.                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                  Освободить ресурсы данной задачи после ее выполнения.                           *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::_free_after_execution() {
    qDebug() << "Free task after execution";
    SproutableAgent::_free_after_execution();
    
    if ( __qmlObject ) {
        delete( __qmlObject );
        __qmlObject = nullptr;
    };
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                               Convert task to JSON object.                                       *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Преобразование задачи в объект JSON.                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

QJsonObject tengu::Task::toJSON() {
    
    QJsonObject o = SproutableAgent::toJSON();
    
    o[ JSON_COLLECTION_ELEMENT ] = "tasks";
    
    o["start_condition"] = __start_condition;
    o["algorythm"] = __algorythm;
    o["stop_condition"] = __stop_condition;
    
    return o;
    
}

// ********************************************************************************************************************
// *                                                                                                                  * 
// *                                Convert JSON representation to object's data field values.                        *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                     Преобразование из JSONа в поля этого объекта.                                *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::Task::fromJSON(QJsonObject json) {
    
    bool result = SproutableAgent::fromJSON( json );
    if ( json.contains("start_condition") ) __start_condition = json.value("start_condition").toString();
    if ( json.contains("algorythm") ) __algorythm = json.value("algorythm").toString();
    if ( json.contains("stop_condition") ) __stop_condition = json.value("stop_condition").toString();
    
    return result;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                  Return start condition                                          *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                               Вернуть условие старта задачи                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::Task::startCondition() {

    return __start_condition;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                   Set start condition.                                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                             Установить условие старта задачи.                                    *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::setStartCondition( QString start ) {

    __start_condition = start;
    _somethingChanged();
    
};

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                Return the task algorythm                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                  Вернуть алгоритм задачи.                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::Task::algorythm() {

    return __algorythm;

};

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                  Set the task algorythm.                                         *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Установить алгоритм выполнения задачи.                                *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::setAlgorythm( QString alg ) {

    __algorythm = alg;
    _somethingChanged();
    
};

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                               Return the stop task condition.                                    *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                              Вернуть условие остановки задачи.                                   *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::Task::stopCondition() {

    return __stop_condition;
    
};

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                Set the stop task condition.                                      *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Установить условие останова задачи.                                   *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::Task::setStopCondition( QString stop ) {

    __stop_condition = stop;
    _somethingChanged();
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                     The destructor.                                              *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                        Деструктор.                                               *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::Task::~Task() {
    
    if ( __qmlObject ) {
        delete( __qmlObject );
        __qmlObject = nullptr;
    };
    
}


