// ********************************************************************************************************************
// *                              Класс снятия видео с камеры и публикации изображения в редисе.                      *
// *                                                                                                                  *
// * Eugene G. Sysoletin <unclesal@mail.ru>                                              created 20 apr 2017 at 22:31 *
// ********************************************************************************************************************

#include "CameraCapturer.h"

using namespace cv;
using namespace std;
using namespace tengu;

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                   Конструктор.                                                   *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu_onboard::CameraCapturer::CameraCapturer() {
    
    __setPublishChannelName();
    __openCamera();
    
    // Начальное заполнение окна интегрирования FPSа
    
    for ( int i=0; i<FPS_IGRAL_WINDOW_SIZE; i++ ) {
        __fps_igral[i] = 0;
    };
    
    // Порождаем редисера, pub/sub и прочие функции "базы данных".
    
    qDebug() << "Create rediser...";
    __redisConnected = false;
    // __rediser = new tengu::TenguRedis();
    QObject::connect( __rediser, SIGNAL(signalConnected()), this, SLOT( __onRedisConnect() ) );
    QObject::connect( __rediser, SIGNAL(signalDisconnected()), this, SLOT( __onRedisDisconnect() ) );    
    QObject::connect( __rediser, SIGNAL(signalError(QString)), this, SLOT( __onRedisError( QString ) ) );
    qDebug() << "Rediser created, connect it...";
    // __rediser->connect();
    qDebug() << "Constructor done.";
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                               Открыта ли видеокамера?                                            *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu_onboard::CameraCapturer::isOpened() {
    return __camera.isOpened();
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                        Реакция на соединение с редисером.                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::__onRedisConnect() {
    __redisConnected = true;
}
 
// ********************************************************************************************************************
// *                                                                                                                  *
// *                                       Реакция на рассоединение с редисером.                                      *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::__onRedisDisconnect() {
    qDebug() << "on redis disconnect.";
    __redisConnected = false;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                     Реакция на возникновение ошибки в редисере.                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::__onRedisError ( QString error ) {
    qDebug() << "on redis error: " << error;
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                      Открытие камеры с использованием установок.                                 *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::__openCamera() {
    
    // Settinger set( QString( ONBOARD_CONFIG_PATH ) );
    
    CREATE_SETTINGS_ONBOARD ;
    settings_onboard.beginGroup( "CameraCapturer" );
    int cameraIndex = settings_onboard.value( "CameraIndex", 0 ).toInt();
    settings_onboard.endGroup();
    __camera.open( cameraIndex );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                       Установка имени канала публикации события о снятой с камеры картинке.                      *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::__setPublishChannelName() {

    CREATE_SETTINGS_ONBOARD;
    settings_onboard.beginGroup( "CameraCapturer" );
    __pubChannelName = settings_onboard.value( "PublishChannel", "" ).toString();
    
    if ( __pubChannelName == "" ) {
        
        // Нет его в установках, делаем по умолчанию.
        __pubChannelName = "video.capture";
        
    };
    
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                          Бесконечный цикл выполнения класса.                                     *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu_onboard::CameraCapturer::run() {
    
    Mat frame;
    int cycle = 0;
    QTime currentTime = QTime::currentTime();
    
    for ( ;; ) {
     
        // Счетчик циклов. Используется для перечитывания значений из файла установок 
        // "время от времени". Кроме того, используется для собирания статистики о скорости
        // съема информации.
        
        cycle ++;
        
        if ( ! __camera.isOpened() ) {
            
            // Камера почему-то оказалась закрытой. Пробуем ее "разбудить". Возможно, за
            // это время сменились установки или воткнули USB-камеру. И у нас - получится.
            
            __openCamera();
            
        } else {
            
            // Камера открыта, читаем с нее.
            __camera >> frame;
            
            if ( ! frame.empty() ) {
                
                // Кадр сняли правильно, хорошо.
                // Публикуем его в локальном редисе.
                if ( __redisConnected ) {
                    qDebug() << "Rediser connected, publish message.";
                    __rediser->publish( __pubChannelName, frame );
                }
                // imshow("this is you, smile! :)", frame);
                
            } else {
                
                // Пустой снятый кадр говорит о завершении видеопотока.
                // Пробуем переоткрыть камеру. Закроем ее, а откроется она на 
                // следующем цикле - вроде как даже сама :-)
                
                __camera.release();
            };
        };
        
        if ( cycle % 10 == 0 ) {
            
            // Было считано 10 кадров, смотрим на время съемки, сколько
            // реально получается кадров в секунду.
            
            long spend_ms = currentTime.msecsTo( QTime::currentTime() );
            float ms_per_picture = spend_ms / 10.0;
            float fps = 1000.0 / ms_per_picture;
            
            // Интегрируем его по окну из нескольких значений. Просто чтобы видеть
            // в статистике - не так сильно дрыгающие значения, какое-то среднее.
            
            for ( int i=FPS_IGRAL_WINDOW_SIZE-1; i>=0; i-- ) {
                __fps_igral[i+1] = __fps_igral[i];
            }
            __fps_igral[0] = fps;
            
            // Считаем среднее FPS по окну интегрирования.
            
            float integred_fps = 0.0;
            for ( int i=0; i<FPS_IGRAL_WINDOW_SIZE; i++ ) {
                integred_fps += __fps_igral[i];
            };
            integred_fps /= (float) FPS_IGRAL_WINDOW_SIZE;
            
            // Публикуем насчитанное значение в статистику.
              
            // Все. Для следующей порции набора кадров нужно установить
            // текущее время, от которого потом снова будем считать количество
            // прошедших милисекунд.
            
            currentTime = QTime::currentTime();
        };
        
        if ( cycle >= PUB_CHANNEL_REREAD_CYCLES ) {
            
            // Пришло время перечитать из установок имя канала публикации. 
            // А заодно и обновить счетчик циклов, начать отсчет с начала.
            
            cycle = 0;
            __setPublishChannelName();
            
        };
    };
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                 Деструктор класса.                                               *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu_onboard::CameraCapturer::~CameraCapturer() {
}


