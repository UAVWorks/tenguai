// ********************************************************************************************************************
// *                                                                                                                  *
// *  One channel for control or surveillance condition of one aircraft's item (one element: aileron, speed e.t.c).   *
// * ---------------------------------------------------------------------------------------------------------------- *
// *     Один канал для управления или наблюдения состояния за одним элементом самолета (элерон, скорость и др.)      *
// *                                                                                                                  *
// * Eugene G. Sysoletin <e.g.sysoletin@gmail.com>                                       Created 06 may 2017 at 11:13 *
// ********************************************************************************************************************

#include "XPlaneChannel.h"

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                            The default constructor                                               *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                           Конструктор по умолчанию.                                              *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::XPlaneChannel::XPlaneChannel() {
    
    __name = QString("");
    redisControlChannel = QString("");
    redisConditionChannel = QString("");
    __subscribed = false;
    __deferredSubscribe = false;
    _dataref = nullptr;
    minValue = MINIMUM_CONSTRAINT;
    maxValue = MAXIMUM_CONSTRAINT;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                      Constructor with channel name parameter                                     *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Констуктор с именем канала в качестве параметра.                               *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::XPlaneChannel::XPlaneChannel( QString aName ) 
    : tengu::XPlaneChannel::XPlaneChannel()
{
    __name = aName;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                              Constructor with channel name and X-Plane dataref name                              *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                              Конструктор от имени канала и имени переменной X-Plane                              *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::XPlaneChannel::XPlaneChannel( QString aName, QString path, int aMinValue, int aMaxValue ) 
    : tengu::XPlaneChannel::XPlaneChannel( aName )
{
    if ( path.length() > 0 ) setDataRef( path );
    
    if ( aMinValue > MINIMUM_CONSTRAINT ) minValue = aMinValue;
    if ( aMaxValue < MAXIMUM_CONSTRAINT) maxValue = aMaxValue;
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                           Return name of this channel.                                           *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                             Вернуть имя этого канала.                                            *
// *                                                                                                                  *
// ********************************************************************************************************************

QString tengu::XPlaneChannel::getName() {
    
    return ( __name );

}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                          Get float value of this channel.                                        *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                     Получить вещественное значение этого канала.                                 *
// *                                                                                                                  *
// ********************************************************************************************************************

float tengu::XPlaneChannel::get_f() {
    
    float result = 0.0;
    
    if ( _dataref ) {    
        result = XPLMGetDataf( _dataref );
    };
    
    return result;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                    Get double precision value from this channel.                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                               Получить число с удвоенной точностью из данного канала.                            *
// *                                                                                                                  *
// ********************************************************************************************************************

double tengu::XPlaneChannel::get_d() {
    
    double result = 0.0;
    if ( _dataref ) {
        result = XPLMGetDatad( _dataref );
    };
    return result;
    
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                          Try to find data reference by path.                                     *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                   Пытаемся найти ссылку на данные по пути переменной.                            *
// *                                                                                                                  *
// ********************************************************************************************************************

XPLMDataRef tengu::XPlaneChannel::find_dataref ( QString path ) {
    
    char * c_path = path.toLocal8Bit().data();
    XPLMDataRef result = XPLMFindDataRef( c_path );
    if ( ! result ) {
        
        QString error = QString("XPlaneChannel::find_dataref(") 
            + path
            + "), dataref not found. Is path correct?";
        xplugin__log( error );        
    };
    
    return result;
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                         Set dataref by XPlane variable path.                                     *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                            Установить указатель на данные из пути переменной в X-Plane                           *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::XPlaneChannel::setDataRef( QString path ) {
    
    _dataref = XPlaneChannel::find_dataref( path );
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                Publish value for this X-Plane channel in the Redis.                              *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                 Публикация значения этого канала X-Plane - в редисе.                             *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::XPlaneChannel::publish ( LoRedis * redis, QString value ) {
    
    if ( redis ) {
        // xplugin__log( QString("Really publish:") + redisConditionChannel + ", value=" + value );
        redis->publish( redisConditionChannel, value );        
        redis->set( redisConditionChannel, value );
    };
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                              Is this channel usable?                                             *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                            Используется ли данный канал?                                         *
// *                                                                                                                  *
// ********************************************************************************************************************

bool tengu::XPlaneChannel::usable() {
    
    return ( _dataref != nullptr );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                Apply restrictions ( if exists ) to integer value.                                *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                          Применить ограничения (если они есть) к целочисленному значению.                        *
// *                                                                                                                  *
// ********************************************************************************************************************

int tengu::XPlaneChannel::applyRestrictions ( int value ) {
    
    int aValue = ( int ) ( round( this->applyRestrictions( ( float) value ) ) );    
    return aValue;
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                    Apply restrictions ( if exists ) to float value.                              *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                           Применить ограничения (если они есть) к вещественному значению.                        *
// *                                                                                                                  *
// ********************************************************************************************************************

float tengu::XPlaneChannel::applyRestrictions ( float value ) {
    
    float aValue = value;
    if ( ( minValue > MINIMUM_CONSTRAINT ) && ( aValue < minValue ) ) aValue = minValue;
    if ( ( maxValue < MAXIMUM_CONSTRAINT ) && ( aValue > maxValue ) ) aValue = maxValue;
    return aValue;
    
}


// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                Set integer value                                                 *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                         Установить целочисленное значение                                        *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::XPlaneChannel::set(int value) {
    
    if ( _dataref ) {        
        int aValue = applyRestrictions( value );                                
        XPLMSetDatai( _dataref, aValue );
    } else xplugin__log( QString("Error: XPlaneChannel::set(), dataref is empty. Channel name=") + __name + ", value=" + QString::number( value ) );
    
}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                Set float value.                                                  *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                          Установить вещественное значение.                                       *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::XPlaneChannel::set ( float value ) {
    
    if ( _dataref ) {
        
        float aValue = applyRestrictions( value );  
        // xplugin__log( QString("XPlaneChannel::set(float), value=") + QString::number(value) + ", aValue=" + QString::number( aValue ) );
        XPLMSetDataf( _dataref, aValue );
        
    };

}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                          The stub to set from string value.                                      *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                          Заглушка для установки из строки.                                       *
// *                                                                                                                  *
// ********************************************************************************************************************

void tengu::XPlaneChannel::set ( QString message ) {

}

// ********************************************************************************************************************
// *                                                                                                                  *
// *                                                  The destructor                                                  *
// * ---------------------------------------------------------------------------------------------------------------- *
// *                                                     Деструктор.                                                  *
// *                                                                                                                  *
// ********************************************************************************************************************

tengu::XPlaneChannel::~XPlaneChannel() {
    
}
