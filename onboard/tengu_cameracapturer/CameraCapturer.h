// ********************************************************************************************************************
// *                              Класс снятия видео с камеры и публикации изображения в редисе.                      *
// *                                                                                                                  *
// * Eugene G. Sysoletin <unclesal@mail.ru>                                              created 20 apr 2017 at 22:29 *
// ********************************************************************************************************************

#pragma once

#include "opencv2/opencv.hpp"
#include <QSettings>
#include <QDebug>
#include <QThread>
#include <QTime>
#include <QCoreApplication>

#include "onboard_common.h"
#include "TenguRedis.h"
// #include "Settinger.h"

using namespace cv;

// Число циклов (получается, что число снятых кадров), по истечение
// которого проходит перечитывание имени канала публикации из файла
// установок. Если мы имеем примерно 20 кадров в секунду, то можно
// легко посчитать время в секундах между перечитываниями.

#define PUB_CHANNEL_REREAD_CYCLES 200

// Размер окна интегрирования FPS. Реальная FPS - дергается. Иногда
// может скакнуть существенно. Но в статистике хочется видеть какие-то
// более осмысленные цифры, усредненные, не дергающиеся.

#define FPS_IGRAL_WINDOW_SIZE 10

namespace tengu_onboard {
    
    class CameraCapturer : public QThread {
        
        Q_OBJECT
        
        public:
            
            CameraCapturer();
            ~CameraCapturer();
            
            /**
             * @short Смогли ли открыть видеокамеру?
             * 
             * Если видеокамера не открылась, то поток из main не будет запускаться. Функция введена
             * потому, что нет возможности сделать qApp->exit, т.к. самого объекта qApp еще не
             * существует на момент отработки конструктора.
             */
            
            bool isOpened();
            
        private:
            
            /**
             * @short Камера, с которой происходит снятие изображения.
             */
            
            VideoCapture __camera;
            
            /**
             * @short Класс pub/sub.
             */
            
            tengu::TenguRedis * __rediser;
            
            /**
             * @short Наличие соединения с публикатором.
             */
            
            bool __redisConnected;
            
            /**
             * @short Бесконечный метод выполнения потока.
             */
            
            void run();
            
            /**
             * @short Открытие камеры.
             * 
             * Если камера открылась и все хорошо - то повторного открытия уже не произойдет. Но если
             * что-то пошло не так, то будет вызываться процедура открытия камеры. Смысл ее в том, что
             * она читает установки, какую конкретно камеру открывать. Таким образом, сами установки
             * можно (теоретически) менять и в процессе работы тоже, они должны "подхватиться".
             */
            
            void __openCamera();
            
            /**
             * @short Установка имени канала публикации событий о снятом видеокадре.
             * 
             * Имя канала перечитывается каждые PUB_CHANNEL_REREAD_CYCLES циклов работы.
             * Соответственно, есть возможность поменять имя канала в файле установок и оно
             * будет через какое-то время принято - без необходимости перезапуска процесса.
             */
            
            void __setPublishChannelName();
            
            /**
             * @short Имя канала, на который происходит публикация снятых картинок.
             *
             * Берется из установок и перечитывается один раз примерно в 10 секунд 
             * (определяется значением константы PUB_CHANNEL_REREAD_CYCLES). По умолчанию
             * ставится значение <b>video.capture</b>.  
             */
            
            QString __pubChannelName;
            
            /**
             * @short Окно интегрирования FPSа. 
             * 
             * Хочется видет статистические значения FPSа, не моментальные. Для этих целей
             * полученные реальные значения FPSа - интегрируются по данному окну.
             */
            
            float __fps_igral[ FPS_IGRAL_WINDOW_SIZE ];
            
        private slots:
            
            void __onRedisConnect();
            void __onRedisDisconnect();
            void __onRedisError( QString error );
    };
    
};
